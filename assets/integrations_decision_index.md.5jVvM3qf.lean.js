import{_ as i,c as a,a0 as e,o as t}from"./chunks/framework.BeGZUZv7.js";const c=JSON.parse('{"title":"LibEntity Decision","description":"","frontmatter":{},"headers":[],"relativePath":"integrations/decision/index.md","filePath":"integrations/decision/index.md"}'),n={name:"integrations/decision/index.md"};function l(p,s,h,r,o,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="libentity-decision" tabindex="-1">LibEntity Decision <a class="header-anchor" href="#libentity-decision" aria-label="Permalink to &quot;LibEntity Decision&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>LibEntity Decision is a decision engine that can be used to make decisions based on a meta-model for business rules. It consolidates LibEntity by bringing structure to this very sensitive aspect of business entities.</p><p>Given the action and transition structure, one can use ordinary java code to implement the business rules. But over time, rules tend to fall through the cracks and become obscure, hard to maintain and understand.</p><p>LibEntity Decision addresses this issue by providing a decision engine somewhat inspired by <a href="https://business4s.org/decisions4s/" target="_blank" rel="noreferrer">decisions4s</a>.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><h3 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h3><p>Make sure to include the annotation processor in your build tool.</p><p>Grandle:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">annotationProcessor </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;com.libentity:lib-entity-decision:&lt;latest-version&gt;</span></span></code></pre></div><h3 id="define-your-input-type" tabindex="-1">Define your input type <a class="header-anchor" href="#define-your-input-type" aria-label="Permalink to &quot;Define your input type&quot;">​</a></h3><p>Similar to decisions4s, you can define your input type using a class.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DecisionInput</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InvoiceInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Rule&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; requesterId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Rule&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LocalDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; isDateSet;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Rule&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; amount;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Rule&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; isApproved;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Important</p><p>At the moment only classes with public/default attributes are supported. Soon records and access via getters will be supported.</p></div><p>The <code>@DecisionInput</code> annotation will generate a value class and a <code>InputProvider</code> interface implementation. More on that later.</p><h3 id="create-your-rules" tabindex="-1">Create your rules <a class="header-anchor" href="#create-your-rules" aria-label="Permalink to &quot;Create your rules&quot;">​</a></h3><p>The <code>Rule</code> type is a type-safe way to define rules for each attribute of the input type. Here is how to define a series of <code>MatchingRules</code> that will be used by our decision table.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blockedRequesters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Set.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;98c8627c-2203-4f0b-8d0a-adea7150f6c6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rules </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MatchingRule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InvoiceInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // in matches if the attribute is in the set</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blockedRequesters),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // it is true if the attribute is present</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    isPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // gt fo greater than</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    gt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BigDecimal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // This is the expected output that can be any object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Boolean.FALSE,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            inputProvider),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MatchingRule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InvoiceInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // catch all</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // catch all</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // grater than 1.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    gt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BigDecimal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // catch all</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Boolean.TRUE,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            inputProvider));</span></span></code></pre></div><h3 id="evaluate" tabindex="-1">Evaluate <a class="header-anchor" href="#evaluate" aria-label="Permalink to &quot;Evaluate&quot;">​</a></h3><p>With the rules at hand, we can create a decision table.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decisionTable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DecisionTable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rules);</span></span></code></pre></div><p>And finally, we can use the decision table to make decisions.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decision </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decisionTable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">evaluateFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // InvoiceInputValue is the generated by the framework</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InvoiceInputValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;a0834601-041b-4837-a2fd-293802cc255f&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                BigDecimal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><h2 id="diagnose" tabindex="-1">Diagnose <a class="header-anchor" href="#diagnose" aria-label="Permalink to &quot;Diagnose&quot;">​</a></h2><p>The decision table result can be inspected by calling <code>decision.diagnose()</code>. The output should be similar to:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Hit Policy: First</span></span>
<span class="line"><span>Result: Optional[true]</span></span>
<span class="line"><span>Input: </span></span>
<span class="line"><span>  requesterId: user1</span></span>
<span class="line"><span>  isDateSet: 2025-05-29</span></span>
<span class="line"><span>  amount: 100</span></span>
<span class="line"><span>  isApproved: &quot;true&quot;</span></span>
<span class="line"><span>Rule 0 [f]:</span></span>
<span class="line"><span>  requesterId  [f]: in( 2a9ad172-9f2f-4dbc-9093-6dbb20b5b07e, 98c8627c-2203-4f0b-8d0a-adea7150f6c6, 95c50ae5-4b4a-44f7-b8ca-fe00b7de8524 )</span></span>
<span class="line"><span>  isDateSet    [t]: isPresent</span></span>
<span class="line"><span>  amount       [t]: &gt; 0.0</span></span>
<span class="line"><span>  isApproved   [t]: -</span></span>
<span class="line"><span>  == x</span></span>
<span class="line"><span>Rule 1 [t]:</span></span>
<span class="line"><span>  requesterId  [t]: -</span></span>
<span class="line"><span>  isDateSet    [t]: -</span></span>
<span class="line"><span>  amount       [t]: &gt; 1.0</span></span>
<span class="line"><span>  isApproved   [t]: -</span></span>
<span class="line"><span>  == true</span></span></code></pre></div><p>The way to read is as follows:</p><ul><li><code>Hit Policy</code>: <code>First</code> means that the first matching rule output will be used as the final result of the evaluation.</li><li><code>Result</code>: <code>Optional[true]</code> means that the first matching rule output was <code>true</code>.</li><li><code>Input</code>: Outputs the values given to the decision table.</li><li><code>Rule x</code> [f/t]: For each <code>MatchingRule</code> outputs each attribute match result. <code>f</code> means false and <code>t</code> means true.</li></ul><h2 id="hit-policies" tabindex="-1">Hit Policies <a class="header-anchor" href="#hit-policies" aria-label="Permalink to &quot;Hit Policies&quot;">​</a></h2><p>LibEntity Decision provides a few hit policies:</p><ul><li><code>First</code>: Returns the first matching rule output.</li><li><code>Unique</code>: Returns the first matching rule as long as there are no other rule also matching the input. Useful for cases where only one rule should match and more than one trigger may indication some unexpected behavior.</li><li><code>Collect</code> : Returns the output of all rules.</li><li><code>Sum</code>: Allows the call site to provide a <code>BinaryOperator</code> on the result of distinct match policy outcomes.</li></ul><h2 id="matchers" tabindex="-1">Matchers <a class="header-anchor" href="#matchers" aria-label="Permalink to &quot;Matchers&quot;">​</a></h2><p>The rules can be formed by arbitrary code, or preferredly by using matchers. Here are the available matchers:</p><ul><li><code>Rule.any()</code>: Matches any value. Always true.</li><li><code>Rule.in(Set&lt;T&gt; target)</code>: Matches if the value is in the set.</li><li><code>Rule.gt(T target)</code>: Matches if the value is greater than the given value.</li><li><code>Rule.ge(T target)</code>: Matches if the value is greater than or equal to the given value.</li><li><code>Rule.lt(T target)</code>: Matches if the value is less than the given value.</li><li><code>Rule.le(T target)</code>: Matches if the value is less than or equal to the given value.</li><li><code>Rule.is(T target)</code>: Matches if the value is equal to the given value.</li><li><code>Rule.isPresent()</code>: Matches if the value is not null. If it&#39;s an Optional, it matches if it is present.</li></ul><h3 id="boolean-logic" tabindex="-1">Boolean logic <a class="header-anchor" href="#boolean-logic" aria-label="Permalink to &quot;Boolean logic&quot;">​</a></h3><p>The especial <code>Rule.test</code> takes a predicate and returns a <code>Rule&lt;T&gt;</code> that matches if the predicate returns <code>true</code>. The produced <code>Rule</code> for each matcher can be used to be negated with a <code>not()</code> call. For example <code>Rule.is(&quot;Samba&quot;).not().evaluate(&quot;Rock&quot;)</code> will evaluate to <code>true</code>.</p><p>Similarly, <code>Rule&lt;T&gt;.and(other)</code> and <code>Rule&lt;T&gt;.or(other)</code> can be used to combine rules into more complex structures.</p><h2 id="why-not-just-write-plain-java" tabindex="-1">Why Not Just Write Plain Java? <a class="header-anchor" href="#why-not-just-write-plain-java" aria-label="Permalink to &quot;Why Not Just Write Plain Java?&quot;">​</a></h2><p>For small or isolated decisions, using plain Java logic might seem simpler:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (blockedRequesters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(requesterId)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isDateSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amount.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BigDecimal.ZERO) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (amount.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BigDecimal.ONE) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>While this is readable at first glance, it becomes problematic as business rules evolve:</p><p>❌ Scattered logic: Rules get embedded across services, controllers, and utilities.</p><p>❌ Poor traceability: It’s hard to answer “Why did this invoice fail?” or “What rule applied?”</p><p>❌ Limited diagnostics: No built-in insight into which rule matched or failed.</p><p>❌ Hard to test in isolation: Rules are often coupled to state and environment.</p><p>❌ High change risk: Modifying logic can introduce subtle regressions.</p><p>Advantages of LibEntity Decision LibEntity Decision was designed to mitigate these issues:</p><p>✅ Centralized rules: Business rules are defined in one place using structured, testable constructs.</p><p>✅ Declarative API: Rules are expressed as data, not control flow, making them easier to read and change.</p><p>✅ Traceability: Rule matches are fully diagnosable via <code>.diagnose()</code>, allowing introspection into decision outcomes.</p><p>✅ Policied evaluation: Choose between <code>First</code>, <code>Unique</code>, <code>Collect</code> or <code>Sum</code> evaluation strategies for different business needs.</p><p>✅ Auto-generated support: <code>@DecisionInput</code> eliminates boilerplate and enforces type safety.</p><p>✅ Composable matchers: Clean, reusable, and composable rule conditions like <code>isSet()</code>, <code>in(...)</code>, <code>gt(...)</code>, etc.</p><table tabindex="0"><thead><tr><th>Feature</th><th>Manual Java Logic</th><th>LibEntity Decision</th></tr></thead><tbody><tr><td>Code structure</td><td>Imperative, scattered</td><td>Declarative, centralized</td></tr><tr><td>Diagnosability</td><td>Manual logging</td><td>Built-in <code>.diagnose()</code></td></tr><tr><td>Rule composition</td><td>Custom logic per case</td><td>Matchers &amp; rules</td></tr><tr><td>Maintainability</td><td>Risky with complexity</td><td>Scales with complexity</td></tr><tr><td>Testability</td><td>Often tightly coupled</td><td>Fully testable in isolation</td></tr><tr><td>Evolution of logic</td><td>Requires refactoring</td><td>Rules can be reordered safely</td></tr></tbody></table><h2 id="future-explorations" tabindex="-1">Future explorations <a class="header-anchor" href="#future-explorations" aria-label="Permalink to &quot;Future explorations&quot;">​</a></h2><p>At the moment evaluation happens eagerly and Policies are used as a way to extract the results. Future explorations may include a lazy evaluation approach, moving the evaluation to each policy.</p><p>The remaining Policies available for <a href="https://business4s.org/decisions4s/" target="_blank" rel="noreferrer">decisions4s</a> will be implemented.</p><p>A Lib-Entity Action Handler backed by a decision will be made available for a tight integration.</p>`,58)]))}const u=i(n,[["render",l]]);export{c as __pageData,u as default};
