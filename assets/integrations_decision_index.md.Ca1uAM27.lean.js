import{_ as i,c as a,a0 as e,o as n}from"./chunks/framework.BeGZUZv7.js";const c=JSON.parse('{"title":"LibEntity Decision","description":"","frontmatter":{},"headers":[],"relativePath":"integrations/decision/index.md","filePath":"integrations/decision/index.md"}'),t={name:"integrations/decision/index.md"};function l(h,s,p,k,r,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="libentity-decision" tabindex="-1">LibEntity Decision <a class="header-anchor" href="#libentity-decision" aria-label="Permalink to &quot;LibEntity Decision&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>LibEntity Decision is a decision engine that can be used to make decisions based on business rules.</p><p>Given the action and transition structure, one can use ordinary java code to implement the business rules. But over time, rules tend to fall through the cracks and become obscure, hard to maintain and understand.</p><p>LibEntity Decision addresses this issue by providing a decision engine somewhat inspired by <a href="https://business4s.org/decisions4s/" target="_blank" rel="noreferrer">decisions4s</a>.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><h3 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h3><p>Make sure to include the annotation processor in your build tool.</p><p>Grandle:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">annotationProcessor </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;com.libentity:lib-entity-decision:&lt;latest-version&gt;</span></span></code></pre></div><h3 id="define-your-input-type" tabindex="-1">Define your input type <a class="header-anchor" href="#define-your-input-type" aria-label="Permalink to &quot;Define your input type&quot;">​</a></h3><p>Similar to decisions4s, you can define your input type using a class.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DecisionInput</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InvoiceInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Rule&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; requesterId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Rule&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LocalDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; isDateSet;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Rule&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; amount;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Rule&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; isApproved;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The <code>@DecisionInput</code> annotation will generate a value class and a <code>InputProvider</code> interface implementation. More on that later.</p><h3 id="create-your-rules" tabindex="-1">Create your rules <a class="header-anchor" href="#create-your-rules" aria-label="Permalink to &quot;Create your rules&quot;">​</a></h3><p>The <code>Rule</code> type is a type-safe way to define rules for each attribute of the input type. Here is how to define a series of <code>MatchingRules</code> that will be used by our decision table.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blockedRequesters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Set.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;98c8627c-2203-4f0b-8d0a-adea7150f6c6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rules </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MatchingRule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InvoiceInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // in matches if the attribute is in the set</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blockedRequesters),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // it is true if the attribute is present</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    isSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // gt fo greater than</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    gt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BigDecimal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // This is the expected output that can be any object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Boolean.FALSE,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            inputProvider),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MatchingRule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InvoiceInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // catch all</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // catch all</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // grater than 1.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    gt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BigDecimal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // catch all</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Boolean.TRUE,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            inputProvider));</span></span></code></pre></div><h3 id="evaluate" tabindex="-1">Evaluate <a class="header-anchor" href="#evaluate" aria-label="Permalink to &quot;Evaluate&quot;">​</a></h3><p>With the rules at hand, we can create a decision table.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decisionTable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DecisionTable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rules);</span></span></code></pre></div><p>And finally, we can use the decision table to make decisions.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decision </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decisionTable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">evaluate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InvoiceInputValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;a0834601-041b-4837-a2fd-293802cc255f&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                BigDecimal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        EvaluationPolicy.First); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EvaluationPolicy.First will return the first matching rule output</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (decision </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DecisionResult.First</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Boolean, InvoiceInputValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> out) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Boolean.FALSE.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Create invoice failed due to decision table: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="diagnose" tabindex="-1">Diagnose <a class="header-anchor" href="#diagnose" aria-label="Permalink to &quot;Diagnose&quot;">​</a></h2><p>The decision table result can be inspected by calling <code>decision.diagnose()</code>. The output should be similar to:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Hit Policy: First</span></span>
<span class="line"><span>Result: Optional[true]</span></span>
<span class="line"><span>Input: </span></span>
<span class="line"><span>  requesterId: user1</span></span>
<span class="line"><span>  isDateSet: 2025-05-28</span></span>
<span class="line"><span>  amount: 100</span></span>
<span class="line"><span>  isApproved: null</span></span>
<span class="line"><span>Rule 0 [f]:</span></span>
<span class="line"><span>  requesterId  [f]: in( 0e9a2aed-741e-47a9-b0f2-357e2621f8a3, 777ea383-3f6e-4c9c-b8e7-d02cb37f5bc1, 98c8627c-2203-4f0b-8d0a-adea7150f6c6 )</span></span>
<span class="line"><span>  isDateSet    [f]: isSet</span></span>
<span class="line"><span>  amount       [f]: &gt; 0.0</span></span>
<span class="line"><span>  isApproved   [f]: -</span></span>
<span class="line"><span>Rule 1 [t]:</span></span>
<span class="line"><span>  requesterId  [t]: -</span></span>
<span class="line"><span>  isDateSet    [t]: -</span></span>
<span class="line"><span>  amount       [t]: &gt; 1.0</span></span>
<span class="line"><span>  isApproved   [t]: -</span></span></code></pre></div><p>The way to read is as follows:</p><ul><li><code>Hit Policy</code>: <code>First</code> means that the first matching rule output will be used as the final result of the evaluation.</li><li><code>Result</code>: <code>Optional[true]</code> means that the first matching rule output was <code>true</code>.</li><li><code>Input</code>: Outputs the values given to the decision table.</li><li><code>Rule x</code> [f/t]: For each <code>MatchingRule</code> outputs each attribute match result. <code>f</code> means false and <code>t</code> means true.</li></ul><h2 id="evaluation-policies" tabindex="-1">Evaluation Policies <a class="header-anchor" href="#evaluation-policies" aria-label="Permalink to &quot;Evaluation Policies&quot;">​</a></h2><p>LibEntity Decision provides a few evaluation policies:</p><ul><li><code>First</code>: Returns the first matching rule output.</li><li><code>Unique</code>: Returns the first matching rule as long as there are no other rule also matching the input. Useful for cases where only one rule should match and more than one trigger may indication some unexpected behavior.</li><li><code>Collect</code> : Returns the output of all rules.</li></ul><h2 id="matchers" tabindex="-1">Matchers <a class="header-anchor" href="#matchers" aria-label="Permalink to &quot;Matchers&quot;">​</a></h2><p>The rules can be formed by arbitrary code, or preferredly by using matchers. Here are the available matchers:</p><ul><li><code>Rule.any()</code>: Matches any value. Always true.</li><li><code>Rule.in(Set&lt;T&gt; target)</code>: Matches if the value is in the set.</li><li><code>Rule.gt(T target)</code>: Matches if the value is greater than the given value.</li><li><code>Rule.ge(T target)</code>: Matches if the value is greater than or equal to the given value.</li><li><code>Rule.lt(T target)</code>: Matches if the value is less than the given value.</li><li><code>Rule.le(T target)</code>: Matches if the value is less than or equal to the given value.</li><li><code>Rule.is(T target)</code>: Matches if the value is equal to the given value.</li><li><code>Rule.isSet()</code>: Matches if the value is not null.</li></ul><p>The especial <code>Rule.test</code> takes a predicate and returns a <code>Rule&lt;T&gt;</code> that matches if the predicate returns true. The produced <code>Rule</code> for each matcher can be used to be negated with a <code>not()</code> call. For example <code>Rule.is(&quot;Samba&quot;).not().evaluate(&quot;Rock&quot;)</code> will evaluate to <code>true</code>.</p><h2 id="future-explorations" tabindex="-1">Future explorations <a class="header-anchor" href="#future-explorations" aria-label="Permalink to &quot;Future explorations&quot;">​</a></h2><p>At the moment evaluation happens eagerly and Policies are used as a way to extract the results. Future explorations may include a lazy evaluation approach, moving the evaluation to each policy.</p><p>The remaining Policies available for <a href="https://business4s.org/decisions4s/" target="_blank" rel="noreferrer">decisions4s</a> will be implemented.</p><p>A Lib-Entity Action Handler backed by a decision will be made available for a tight integration.</p>`,38)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
