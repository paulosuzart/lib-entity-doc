import{_ as i,c as a,a0 as t,o as n}from"./chunks/framework.BeGZUZv7.js";const E=JSON.parse('{"title":"Annotation Support Module","description":"","frontmatter":{},"headers":[],"relativePath":"integrations/annotations/index.md","filePath":"integrations/annotations/index.md"}'),e={name:"integrations/annotations/index.md"};function l(h,s,p,o,r,k){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="annotation-support-module" tabindex="-1">Annotation Support Module <a class="header-anchor" href="#annotation-support-module" aria-label="Permalink to &quot;Annotation Support Module&quot;">​</a></h1><p>This module provides an annotation-based DSL for defining entity types, actions, and validators for the LibEntity framework. It offers a declarative, beginner-friendly alternative to the builder-style DSL found in the <code>library</code> module, enabling rapid and readable configuration using Java annotations.</p><h2 id="quick-comparison-annotation-dsl-vs-core-dsl" tabindex="-1">Quick Comparison: Annotation DSL vs. Core DSL <a class="header-anchor" href="#quick-comparison-annotation-dsl-vs-core-dsl" aria-label="Permalink to &quot;Quick Comparison: Annotation DSL vs. Core DSL&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Feature</th><th>Annotation DSL (This Module)</th><th>Core DSL (<code>library</code> module)</th></tr></thead><tbody><tr><td><strong>Entity Definition</strong></td><td><code>@EntityDefinition</code> on class, fields/actions as annotation attrs</td><td><code>EntityType.builder(&quot;...&quot;)</code> with chained <code>.field(...)</code>, etc.</td></tr><tr><td><strong>Field Definition</strong></td><td><code>@Field</code> array in <code>@EntityDefinition(fields = {...})</code></td><td><code>.field(&quot;name&quot;, Type.class, f -&gt; f.validateInState(...))</code></td></tr><tr><td><strong>Validator Definition</strong></td><td><code>validators</code> in <code>@Field</code>, <code>inStateValidators</code>, <code>transitionValidators</code> in <code>@EntityDefinition</code></td><td><code>.validateInState(...)</code>, <code>.validateStateTransition(...)</code></td></tr><tr><td><strong>Action Definition</strong></td><td><code>@Action</code> in <code>actions</code> in <code>@EntityDefinition</code>, handler class with <code>@Handle</code> and <code>@OnlyIf</code> methods</td><td><code>.action(&quot;name&quot;, ActionBuilder.forHandler(...).onlyIf(...).build(&quot;name&quot;))</code></td></tr><tr><td><strong>Command Type</strong></td><td>POJO with <code>@EntityCommand(action = &quot;...&quot;)</code></td><td>Any class implementing <code>ActionCommand</code></td></tr><tr><td><strong>Allowed States</strong></td><td><code>@Action(allowedStates = {&quot;STATE&quot;})</code> in <code>@EntityDefinition</code></td><td><code>.allowedStates(EnumSet.of(...))</code> in builder</td></tr><tr><td><strong>Availability Predicate</strong></td><td><code>@OnlyIf</code> method in action handler</td><td><code>.onlyIf(...)</code> in action builder</td></tr><tr><td><strong>Extensibility</strong></td><td>Add new annotations, handler classes, or validators</td><td>Compose new builder chains, extend builder/entity classes</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">No More Boilerplate!</p><p>With the annotation-based DSL, your command objects <strong>do not need to implement any interfaces</strong>. Just annotate your POJO with <code>@EntityCommand</code> and you&#39;re done!</p><ul><li>No more empty <code>getActionName()</code> methods.</li><li>No more marker interfaces.</li><li>Cleaner, more idiomatic Java code.</li></ul></div><hr><h2 id="example-annotation-based-entity-definition-payment-domain" tabindex="-1">Example: Annotation-Based Entity Definition (Payment Domain) <a class="header-anchor" href="#example-annotation-based-entity-definition-payment-domain" aria-label="Permalink to &quot;Example: Annotation-Based Entity Definition (Payment Domain)&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. State Enum</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PaymentState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    DRAFT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    PENDING_APPROVAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    APPROVED</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. Request and Command Types</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PaymentRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amount;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EntityCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;submitPayment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubmitPaymentCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String submitDate;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String submitterId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. Action Handler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PaymentActionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Handle</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PaymentState </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, PaymentRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SubmitPaymentCommand </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Implement state mutation logic if needed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OnlyIf</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> canSubmit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PaymentState </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, PaymentRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SubmitPaymentCommand </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4. Entity Definition</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EntityDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Payment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    stateEnum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PaymentState.class,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    fields</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;amount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> int.class,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            required</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            validators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {SampleAmountValidator.class}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    actions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;submitPayment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Submit a payment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PaymentActionHandler.class)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    inStateValidators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {SampleAmountValidator.class},</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    transitionValidators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {SampleTransitionValidator.class}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PaymentEntityConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><h2 id="example-core-builder-dsl" tabindex="-1">Example: Core (Builder) DSL <a class="header-anchor" href="#example-core-builder-dsl" aria-label="Permalink to &quot;Example: Core (Builder) DSL&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EntityType&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PaymentState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PaymentRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; paymentType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EntityType.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Payment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submitPayment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ActionBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((state, request, command, mutator) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mutator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PaymentState.APPROVED))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onlyIf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((state, request, command) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowedStates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EnumSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PaymentState.DRAFT))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submitPayment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><hr><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li><strong>Declarative Action &amp; Validator Registration:</strong> Define actions, guards, and validators using simple annotations.</li><li><strong>Command Flexibility:</strong> Commands can be POJOs with <code>@EntityCommand</code>, no need to implement interfaces.</li><li><strong>Type Safety:</strong> The processor checks handler signatures and state names at build time.</li><li><strong>Integration:</strong> Outputs real <code>EntityType</code> objects compatible with the core engine.</li></ul><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><ul><li>Annotate your handler and validator classes/methods.</li><li>The annotation processor scans for these annotations and builds a registry of entity types and actions.</li><li>At runtime, actions and validators are invoked via reflection and proxies, ensuring compatibility with the core engine.</li></ul><h2 id="why-no-interface-requirement-is-a-big-deal" tabindex="-1">Why No Interface Requirement Is a Big Deal <a class="header-anchor" href="#why-no-interface-requirement-is-a-big-deal" aria-label="Permalink to &quot;Why No Interface Requirement Is a Big Deal&quot;">​</a></h2><ul><li><strong>Less Boilerplate:</strong> Your commands can be plain Java classes—no need for extra methods or inheritance.</li><li><strong>Easier Refactoring:</strong> Rename, move, or refactor your commands freely without breaking contracts.</li><li><strong>Better Integration:</strong> Works seamlessly with records, Lombok, and other POJO-friendly tools.</li><li><strong>Framework Agnostic:</strong> Your domain model stays decoupled from framework interfaces.</li></ul><h2 id="when-to-use" tabindex="-1">When to Use <a class="header-anchor" href="#when-to-use" aria-label="Permalink to &quot;When to Use&quot;">​</a></h2><ul><li>Prefer this module if you want a quick, annotation-driven, and beginner-friendly way to define entities.</li><li>Use the builder DSL for maximum flexibility, advanced composition, or meta-programming.</li></ul><h2 id="limitations" tabindex="-1">⚠️ Limitations <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;:warning: Limitations&quot;">​</a></h2><ul><li><code>allowedStates</code> in annotations must be strings due to Java annotation restrictions (see docs for rationale).</li><li>For maximum type safety, use the builder DSL.</li></ul><h2 id="instance-factories-for-actions-and-validators" tabindex="-1">Instance Factories for Actions and Validators <a class="header-anchor" href="#instance-factories-for-actions-and-validators" aria-label="Permalink to &quot;Instance Factories for Actions and Validators&quot;">​</a></h2><p>By default, the annotation processor creates new handler and validator instances using reflection. For advanced scenarios, such as integration with Spring or custom DI frameworks, you can supply a custom instance factory:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EntityAnnotationProcessor processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EntityAnnotationProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clazz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> applicationContext.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clazz));</span></span></code></pre></div><p>Or for manual/test-scoped instances:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PaymentActionHandler handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PaymentActionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EntityAnnotationProcessor processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EntityAnnotationProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clazz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (clazz.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PaymentActionHandler.class)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clazz.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDeclaredConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>This allows seamless integration with dependency injection frameworks or test doubles, making your annotated actions and validators highly flexible and testable.</p><h2 id="requirements-for-annotated-methods" tabindex="-1">Requirements for Annotated Methods <a class="header-anchor" href="#requirements-for-annotated-methods" aria-label="Permalink to &quot;Requirements for Annotated Methods&quot;">​</a></h2><p>When using the annotation-based DSL, your handler and validator methods must follow strict signature requirements to ensure correct processing. Here are the requirements for each type:</p><h3 id="handle-methods" tabindex="-1">@Handle Methods <a class="header-anchor" href="#handle-methods" aria-label="Permalink to &quot;@Handle Methods&quot;">​</a></h3><ul><li>Must have <strong>exactly 4 parameters</strong> in this order: <ol><li>The state enum type (e.g., <code>PaymentState</code>)</li><li>The request type (e.g., <code>PaymentRequest</code>)</li><li>The command type (as defined in your <code>@Action(command = ...)</code>)</li><li>A <code>StateMutator</code> (from the framework)</li></ol></li><li><strong>Example:</strong><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Handle</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PaymentState state, PaymentRequest req, SubmitPaymentCommand cmd, StateMutator mutator) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><strong>Common error:</strong> Wrong parameter count or wrong types/order will result in an error: <code>@Handle method must have exactly 4 parameters (state, request, command, mutator)</code></li></ul><h3 id="in-state-validator-methods" tabindex="-1">In-State Validator Methods <a class="header-anchor" href="#in-state-validator-methods" aria-label="Permalink to &quot;In-State Validator Methods&quot;">​</a></h3><ul><li>Must have <strong>exactly 3 parameters</strong> in this order: <ol><li>The state enum type</li><li>The request type</li><li>The validation context (usually <code>ValidationContext</code>)</li></ol></li><li><strong>Example:</strong><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PaymentState state, PaymentRequest req, ValidationContext ctx) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><strong>Common error:</strong> Wrong parameter count or wrong types/order will result in an error: <code>InStateValidator &#39;validate&#39; method must have exactly 3 parameters (state, request, ctx)</code></li></ul><h3 id="transition-validator-methods" tabindex="-1">Transition Validator Methods <a class="header-anchor" href="#transition-validator-methods" aria-label="Permalink to &quot;Transition Validator Methods&quot;">​</a></h3><ul><li>Must have <strong>exactly 4 parameters</strong> in this order: <ol><li>From-state (state enum type)</li><li>To-state (state enum type)</li><li>The request type</li><li>The validation context (usually <code>ValidationContext</code>)</li></ol></li><li><strong>Example:</strong><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PaymentState from, PaymentState to, PaymentRequest req, ValidationContext ctx) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><strong>Common error:</strong> Wrong parameter count or wrong types/order will result in an error: <code>TransitionValidator &#39;validate&#39; method must have exactly 4 parameters (from, to, request, ctx)</code></li></ul><h3 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h3><ul><li>If you see errors about parameter counts or types, double-check your method signatures against the above requirements.</li><li>All types must match exactly (including generics if used).</li><li>For more advanced usage or to bypass annotation restrictions, use the builder DSL in the core module.</li></ul><h3 id="using-with-spring" tabindex="-1">Using with Spring <a class="header-anchor" href="#using-with-spring" aria-label="Permalink to &quot;Using with Spring&quot;">​</a></h3><p>To integrate with Spring, you can provide an instance factory that looks up beans from the Spring <code>ApplicationContext</code>. This allows your handlers and validators to be regular Spring beans with full dependency injection:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.ApplicationContext;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ApplicationContext applicationContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// inject or obtain context</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EntityAnnotationProcessor processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EntityAnnotationProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clazz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> applicationContext.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clazz));</span></span></code></pre></div><p>Register your action handlers and validators as <code>@Component</code> or <code>@Service</code> beans. The processor will use Spring to instantiate and inject dependencies as needed.</p><p><em>In the future, a dedicated <code>annotation-support-spring</code> module may be provided for even smoother integration.</em></p><hr><p><em>This module is designed to lower the barrier to entry for new users and speed up development for common entity patterns. Contributions and feedback welcome!</em></p>`,44)]))}const c=i(e,[["render",l]]);export{E as __pageData,c as default};
