import{_ as s,c as a,a0 as e,o as t}from"./chunks/framework.DX7EX5Ix.js";const c=JSON.parse('{"title":"Fields","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/fields.md","filePath":"concepts/fields.md"}'),n={name:"concepts/fields.md"};function l(h,i,d,p,r,o){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="fields" tabindex="-1">Fields <a class="header-anchor" href="#fields" aria-label="Permalink to &quot;Fields&quot;">​</a></h1><p>Fields represent the data properties of your entities in LibEntity. Each field has a name, type, and can have validation rules, default values, and metadata. Fields are declared using the fluent DSL, making your entity definitions expressive and type-safe.</p><h2 id="what-is-a-field" tabindex="-1">What is a Field? <a class="header-anchor" href="#what-is-a-field" aria-label="Permalink to &quot;What is a Field?&quot;">​</a></h2><p>A <strong>field</strong> is a property of your entity, such as <code>amount</code>, <code>vat</code>, or <code>approverId</code>. Fields can be of any Java type, including primitives, <code>String</code>, <code>BigDecimal</code>, enums, dates, and even custom objects.</p><h2 id="example-declaring-fields" tabindex="-1">Example: Declaring Fields <a class="header-anchor" href="#example-declaring-fields" aria-label="Permalink to &quot;Example: Declaring Fields&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;amount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, BigDecimal.class, f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Invoice amount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">validateInState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(InvoiceState.DRAFT, (state, entity, req, ctx) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (entity.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entity.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BigDecimal.ZERO) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;INVALID_AMOUNT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Amount must be greater than zero&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="field-types" tabindex="-1">Field Types <a class="header-anchor" href="#field-types" aria-label="Permalink to &quot;Field Types&quot;">​</a></h2><ul><li><strong>Primitive types:</strong> <code>int</code>, <code>boolean</code>, etc.</li><li><strong>Common Java types:</strong> <code>String</code>, <code>BigDecimal</code>, <code>LocalDate</code>, etc.</li><li><strong>Enums:</strong> For controlled value sets</li><li><strong>Custom types:</strong> Your own classes</li></ul><h2 id="field-validation" tabindex="-1">Field Validation <a class="header-anchor" href="#field-validation" aria-label="Permalink to &quot;Field Validation&quot;">​</a></h2><p>Fields can have validation logic attached, which is run in specific states or transitions.</p><h2 id="field-metadata" tabindex="-1">Field Metadata <a class="header-anchor" href="#field-metadata" aria-label="Permalink to &quot;Field Metadata&quot;">​</a></h2><p>You can add descriptions, constraints, and even custom metadata to fields, improving documentation and API generation.</p>`,12)]))}const E=s(n,[["render",l]]);export{c as __pageData,E as default};
