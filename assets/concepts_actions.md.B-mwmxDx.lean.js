import{_ as l,c as h,a0 as o,b as p,w as t,a1 as r,j as s,a,B as k,o as e,G as d}from"./chunks/framework.BeGZUZv7.js";const f=JSON.parse('{"title":"Actions","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/actions.md","filePath":"concepts/actions.md"}'),c={name:"concepts/actions.md"};function E(g,i,u,y,m,A){const n=k("Mermaid");return e(),h("div",null,[i[1]||(i[1]=o(`<h1 id="actions" tabindex="-1">Actions <a class="header-anchor" href="#actions" aria-label="Permalink to &quot;Actions&quot;">​</a></h1><p>Actions are operations that can be performed on an entity. In LibEntity, actions encapsulate business logic and are the primary way to trigger state transitions, update fields, or perform validations.</p><h2 id="what-is-an-action" tabindex="-1">What is an Action? <a class="header-anchor" href="#what-is-an-action" aria-label="Permalink to &quot;What is an Action?&quot;">​</a></h2><p>An <strong>action</strong> represents a business operation (such as &quot;approve&quot;, &quot;submit&quot;, or &quot;reject&quot;) that can be performed on an entity. Actions are defined in your entity type using the DSL and are associated with:</p><ul><li>Allowed states (when the action is available)</li><li>A command type (input data for the action)</li><li>A handler (business logic to execute)</li><li>Optional predicates (e.g., <code>onlyIf</code>) to further restrict availability</li></ul><h2 id="example-defining-an-action" tabindex="-1">Example: Defining an Action <a class="header-anchor" href="#example-defining-an-action" aria-label="Permalink to &quot;Example: Defining an Action&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;approve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowedStates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Set.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(InvoiceState.PENDING))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commandType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApproveInvoiceCommand.class)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((state, req, cmd, entity, mutator) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        entity.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setApproverId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cmd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getApproverId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mutator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(InvoiceState.APPROVED);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="action-handler-parameters" tabindex="-1">Action Handler Parameters <a class="header-anchor" href="#action-handler-parameters" aria-label="Permalink to &quot;Action Handler Parameters&quot;">​</a></h2><ul><li><code>state</code>: The current state of the entity</li><li><code>req</code>: The request context (e.g., user info)</li><li><code>cmd</code>: The command object containing input data</li><li><code>entity</code>: The entity instance being mutated</li><li><code>mutator</code>: Used to change the entity&#39;s state or perform controlled mutations</li></ul><h2 id="action-availability" tabindex="-1">Action Availability <a class="header-anchor" href="#action-availability" aria-label="Permalink to &quot;Action Availability&quot;">​</a></h2><p>Actions can be restricted to certain states and further gated using the <code>onlyIf</code> predicate:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowedStates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Set.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(InvoiceState.DRAFT))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onlyIf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entity.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entity.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BigDecimal.ZERO) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="why-use-actions" tabindex="-1">Why Use Actions? <a class="header-anchor" href="#why-use-actions" aria-label="Permalink to &quot;Why Use Actions?&quot;">​</a></h2><ul><li>Centralize business logic</li><li>Make state transitions explicit</li><li>Enforce validation and security rules regardless of request source</li><li>Enable dynamic discovery of available actions (see advanced features)</li></ul><h2 id="action-execution" tabindex="-1">Action Execution <a class="header-anchor" href="#action-execution" aria-label="Permalink to &quot;Action Execution&quot;">​</a></h2><p>Actions are executed by calling the <code>execute</code> method of the provide implementation of <code>ActionExecutor&lt;S, R&gt;</code>. The default implementation provided by <code>SyncActionExecutor&lt;S, R&gt;</code> works as follows:</p>`,16)),(e(),p(r,null,{default:t(()=>[d(n,{id:"mermaid-106",class:"mermaid",graph:"flowchart%20TD%0A%20%20%20%20A((Start%3A%20execute))%20--%3E%20B%7BFind%20Action%20by%20Name%7D%0A%20%20%20%20B%20--%20%22Not%20Found%22%20--%3E%20Z%5BThrow%20IllegalArgumentException%5D%0A%20%20%20%20B%20--%20%22Found%22%20--%3E%20C%7BCommand%20Type%20Matches%3F%7D%0A%20%20%20%20C%20--%20%22No%22%20--%3E%20Y%5BThrow%20IllegalArgumentException%5D%0A%20%20%20%20C%20--%20%22Yes%22%20--%3E%20D%5BCreate%20StateMutator%5D%0A%20%20%20%20D%20--%3E%20E%5BCall%20action%5D%0A%20%20%20%20E%20--%3E%20F%7BhasErrors%3F%7D%0A%20%20%20%20F%20--%20%22Yes%22%20--%3E%20X%5BThrow%20ValidationException%5D%0A%20%20%20%20F%20--%20%22No%22%20--%3E%20G%5BReturn%20ActionResult%5D%0A"})]),fallback:t(()=>i[0]||(i[0]=[a(" Loading... ")])),_:1})),i[2]||(i[2]=s("p",null,[a("If the default implementation of "),s("code",null,"ActionExecutor"),a(" is not sufficient, you can provide your own implementation of "),s("code",null,"ActionExecutor<S, R>"),a(".")],-1))])}const b=l(c,[["render",E]]);export{f as __pageData,b as default};
