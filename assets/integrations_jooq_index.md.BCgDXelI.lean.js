import{_ as s,c as a,a0 as e,o as t}from"./chunks/framework.BeGZUZv7.js";const c=JSON.parse('{"title":"LibEntity Filters with jOOQ","description":"","frontmatter":{},"headers":[],"relativePath":"integrations/jooq/index.md","filePath":"integrations/jooq/index.md"}'),n={name:"integrations/jooq/index.md"};function l(o,i,r,h,p,d){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="libentity-filters-with-jooq" tabindex="-1">LibEntity Filters with jOOQ <a class="header-anchor" href="#libentity-filters-with-jooq" aria-label="Permalink to &quot;LibEntity Filters with jOOQ&quot;">â€‹</a></h1><p><strong>jooq-support</strong> is a utility module for integrating LibEntity filter definitions with <a href="https://www.jooq.org/" target="_blank" rel="noreferrer">jOOQ</a> in Java projects. It provides a bridge between high-level, type-safe filter objects and the construction of dynamic, composable SQL <code>Condition</code> objects for use in jOOQ queries. This makes filtering, searching, and querying your database seamless, robust, and maintainable.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">â€‹</a></h2><ul><li><strong>Automatic translation of LibEntity filter objects to jOOQ <code>Condition</code> objects</strong></li><li><strong>Support for a wide range of comparators:</strong><br> Equality (<code>EQ</code>), greater/less than (<code>GT</code>, <code>GTE</code>, <code>LT</code>, <code>LTE</code>), <code>IN</code>, <code>LIKE</code>, and boolean</li><li><strong>Range filtering</strong> via <code>RangeFilter&lt;T&gt;</code></li><li><strong>Virtual fields</strong> via custom mappers</li><li><strong>Annotation processor</strong> for generating filter meta-classes</li><li><strong>Extensible:</strong> Easily add support for new comparators or custom filter logic</li></ul><hr><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">â€‹</a></h2><h3 id="add-dependency" tabindex="-1">Add Dependency <a class="header-anchor" href="#add-dependency" aria-label="Permalink to &quot;Add Dependency&quot;">â€‹</a></h3><p>Add <code>jooq-support</code> as a dependency in your Gradle or Maven build:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependencies {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    implementation project(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;:jooq-support&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="ðŸš€-annotation-processor-recommended" tabindex="-1">ðŸš€ Annotation Processor (Recommended) <a class="header-anchor" href="#ðŸš€-annotation-processor-recommended" aria-label="Permalink to &quot;ðŸš€ Annotation Processor (Recommended)&quot;">â€‹</a></h3><p>The easiest and safest way to use filters with jOOQ is via the provided annotation processor. This generates meta-classes for your filters, reducing boilerplate and ensuring correctness.</p><h3 id="annotate-your-filter-class" tabindex="-1">Annotate Your Filter Class <a class="header-anchor" href="#annotate-your-filter-class" aria-label="Permalink to &quot;Annotate Your Filter Class&quot;">â€‹</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.libentity.jooqsupport.annotation.JooqFilter;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.libentity.jooqsupport.annotation.JooqFilterField;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">JooqFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tableClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UserTable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tableVar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;USER&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">JooqFilterField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">field</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">comparators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Comparator.EQ})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">JooqFilterField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">field</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">comparators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Comparator.EQ, Comparator.LIKE})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="use-the-generated-meta-class" tabindex="-1">Use the Generated Meta-Class <a class="header-anchor" href="#use-the-generated-meta-class" aria-label="Permalink to &quot;Use the Generated Meta-Class&quot;">â€‹</a></h3><p>The annotation processor will generate UserFilterJooqMeta for you. Use it like this:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.example.UserFilterJooqMeta.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UserFilter filter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filter.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Condition condition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JooqFilterSupport.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buildCondition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filter, DEFINITION, FIELD_MAPPING);</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The method <code>JooqFilterSupport.buildCondition</code> is used to build a jOOQ <code>Condition</code> from a filter object as a <code>AND</code> statement. In the future, it will support <code>OR</code> statements.</p></div><p><code>DEFINITION</code> and <code>FIELD_MAPPING</code> are generated constants mapping your filter fields to supported comparators and jOOQ fields.</p><h3 id="compile-time-safety" tabindex="-1">Compile-Time Safety <a class="header-anchor" href="#compile-time-safety" aria-label="Permalink to &quot;Compile-Time Safety&quot;">â€‹</a></h3><p>If you misuse the annotation (e.g., omit required attributes), compilation will fail with a clear error.</p><p>Manual Setup (Advanced/Legacy) If you wish to define everything manually:</p>`,21)]))}const E=s(n,[["render",l]]);export{c as __pageData,E as default};
